rule: LT01

test_basic:
  pass_str: SELECT 1

test_basic_fix:
  fail_str: SELECT     1
  fix_str: SELECT 1

test_simple_fix:
  fail_str: |
    select
        1 + 2     + 3     + 4        -- Comment
    from     foo
  fix_str: |
    select
        1 + 2 + 3 + 4        -- Comment
    from foo

test_identifier_fix:
  fail_str: |
    SELECT [thistable] . [col]
    FROM [thisdatabase] . [thisschema]
            . [thistable]
  fix_str: |
    SELECT [thistable].[col]
    FROM [thisdatabase].[thisschema].[thistable]
  configs:
    core:
      dialect: tsql

test_comparison_operator_fix:
  fail_str: |
    SELECT foo
    FROM bar
    WHERE baz > = 10;
  fix_str: |
    SELECT foo
    FROM bar
    WHERE baz >= 10;
  configs:
    core:
      dialect: tsql

test_comparison_operator_pass:
  pass_str: |
    SELECT foo
    FROM bar
    WHERE baz >= 10;
  configs:
    core:
      dialect: tsql

test_casting_operator_fix:
  fail_str: |
    SELECT '1' :: INT;
  fix_str: |
    SELECT '1'::INT;
  configs:
    core:
      dialect: postgres

test_casting_operator_pass:
  pass_str: |
    SELECT '1'::INT;
  configs:
    core:
      dialect: postgres

test_fix_tsql_spaced_chars:
  fail_str: |
    SELECT col1 FROM table1 WHERE 1 > = 1
  fix_str: |
    SELECT col1 FROM table1 WHERE 1 >= 1
  configs:
    core:
      dialect: tsql

# Check CASE Statement parses with newlines properly
# See https://github.com/sqlfluff/sqlfluff/issues/2495
test_pass_postgres_case_statement:
  pass_str: |
    SELECT
        a,
        CASE
            WHEN 1 THEN 'one'
            WHEN 2 THEN 'two'
            ELSE 'other'
        END AS b
    FROM test;
  configs:
    core:
      dialect: postgres

test_excess_space_cast:
  fail_str: |
    select
        '1'    ::   INT as id1,
        '2'::int as id2
    from table_a
  fix_str: |
    select
        '1'::INT as id1,
        '2'::int as id2
    from table_a

test_redshift_at_time_zone:
  pass_str: |
    SELECT
    date_w_tz [0] AT TIME ZONE 'Etc/UTC' AS bar
    FROM foo
  configs:
    core:
      dialect: redshift

test_excess_space_without_align_alias:
  fail_str: |
        SELECT
            a    AS first_column,
            b      AS second_column,
            (a + b) / 2 AS third_column
        FROM foo
  fix_str: |
    SELECT
        a AS first_column,
        b AS second_column,
        (a + b) / 2 AS third_column
    FROM foo
  configs:
    # This is the default config but we're being explicit
    # here for testing.
    layout:
      type:
        alias_expression:
          spacing_before: single

test_excess_space_with_align_alias:
  # NOTE: The config here shouldn't move the table alias
  fail_str: |
        SELECT
            a    AS first_column,
            b      AS second_column,
            (a + b) / 2 AS third_column
        FROM foo   AS bar
  fix_str: |
    SELECT
        a           AS first_column,
        b           AS second_column,
        (a + b) / 2 AS third_column
    FROM foo AS bar
  configs: &align_alias
    layout:
      type:
        alias_expression:
          spacing_before: align
          align_within: select_clause
          align_scope: bracketed

test_missing_keyword_with_align_alias:
  fail_str: |
        SELECT
            a    first_column,
            b      AS second_column,
            (a + b) / 2 AS third_column
        FROM foo
  fix_str: |
    SELECT
        a           first_column,
        b           AS second_column,
        (a + b) / 2 AS third_column
    FROM foo
  configs: *align_alias

test_skip_alias_with_align_alias:
  fail_str: |
        SELECT
            a   ,
            b   ,
            (a   +   b) /   2
        FROM foo
  fix_str: |
    SELECT
        a,
        b,
        (a + b) / 2
    FROM foo
  configs: *align_alias

test_excess_space_with_align_alias_wider:
  # NOTE: The config here SHOULD move the table alias
  # NOTE: The combined LT01 also fixes the missing space
  # between `USING` and `(a)`.
  fail_str: |
    SELECT
        a    AS first_column,
        b      AS second_column,
        (a      +      b)      /      2 AS third_column
    FROM foo   AS first_table
    JOIN my_tbl AS second_table USING(a)
  fix_str: |
    SELECT
        a           AS first_column,
        b           AS second_column,
        (a + b) / 2 AS third_column
    FROM foo        AS first_table
    JOIN my_tbl     AS second_table USING (a)
  configs: &align_alias_wider
    layout:
      type:
        alias_expression:
          spacing_before: align
          align_within: select_statement
          align_scope: bracketed

test_align_alias_boundary:
  # The alias inside the expression shouldn't move.
  fail_str: |
    SELECT
        a    AS first_column,
        (SELECT b AS c)      AS second_column
  fix_str: |
    SELECT
        a               AS first_column,
        (SELECT b AS c) AS second_column
  configs: *align_alias

test_align_alias_inline_pass:
  # The aliases on the same line shouldn't panic.
  pass_str: SELECT a AS b, c AS d FROM tbl
  configs: *align_alias

test_align_alias_inline_fail:
  # The aliases on the same line shouldn't panic.
  fail_str: SELECT a   AS   b  ,   c   AS   d    FROM tbl
  fix_str: SELECT a AS b, c AS d FROM tbl
  configs: *align_alias
